unit TestuConversao;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Generics.Defaults, Classes, uConversao, System.StrUtils;

type
  // Test methods for class TConverteTexto

  TestTConverteTexto = class(TTestCase)
  strict private
    FConverteTexto: TConverteTexto;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdicionarTexto;
  end;
  // Test methods for class TConverteInvertido

  TestTConverteInvertido = class(TTestCase)
  strict private
    FConverteInvertido: TConverteInvertido;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConverter;
    procedure TestAdicionarTexto;
  end;
  // Test methods for class TConvertePrimeiraMaiuscula

  TestTConvertePrimeiraMaiuscula = class(TTestCase)
  strict private
    FConvertePrimeiraMaiuscula: TConvertePrimeiraMaiuscula;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConverter;
    procedure TestAdicionarTexto;
  end;
  // Test methods for class TConverteOrdenado

  TestTConverteOrdenado = class(TTestCase)
  strict private
    FConverteOrdenado: TConverteOrdenado;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConverter;
    procedure TestAdicionarTexto;
  end;

implementation

uses
  System.SysUtils;

procedure TestTConverteTexto.SetUp;
begin
  FConverteTexto := TConverteTexto.Create;
end;

procedure TestTConverteTexto.TearDown;
begin
  FConverteTexto := Nil;
end;

procedure TestTConverteTexto.TestAdicionarTexto;
const a = 'Abc abc';
var
  Value: string;
begin
  FConverteTexto.AdicionarTexto(a);
  CheckEquals(a, FConverteTexto.Texto, 'A propriedade não recebeu o valor correto');
end;

procedure TestTConverteInvertido.SetUp;
begin
  FConverteInvertido := TConverteInvertido.Create;
end;

procedure TestTConverteInvertido.TearDown;
begin
  FConverteInvertido := nil;
end;

procedure TestTConverteInvertido.TestConverter;
const a = 'abc abc';
const b = 'cba cba';
var
  ReturnValue: string;
begin
  FConverteInvertido.AdicionarTexto(a);
  ReturnValue := FConverteInvertido.Converter;
  CheckEquals(b, ReturnValue, );
  // TODO: Validate method results
end;

procedure TestTConverteInvertido.TestAdicionarTexto;
var
  ReturnValue: IConversao;
  Value: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FConverteInvertido.AdicionarTexto(Value);
  // TODO: Validate method results
end;

procedure TestTConvertePrimeiraMaiuscula.SetUp;
begin
  FConvertePrimeiraMaiuscula := TConvertePrimeiraMaiuscula.Create;
end;

procedure TestTConvertePrimeiraMaiuscula.TearDown;
begin
  FConvertePrimeiraMaiuscula.Free;
  FConvertePrimeiraMaiuscula := nil;
end;

procedure TestTConvertePrimeiraMaiuscula.TestConverter;
var
  ReturnValue: string;
begin
  ReturnValue := FConvertePrimeiraMaiuscula.Converter;
  // TODO: Validate method results
end;

procedure TestTConvertePrimeiraMaiuscula.TestAdicionarTexto;
var
  ReturnValue: IConversao;
  Value: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FConvertePrimeiraMaiuscula.AdicionarTexto(Value);
  // TODO: Validate method results
end;

procedure TestTConverteOrdenado.SetUp;
begin
  FConverteOrdenado := TConverteOrdenado.Create;
end;

procedure TestTConverteOrdenado.TearDown;
begin
  FConverteOrdenado.Free;
  FConverteOrdenado := nil;
end;

procedure TestTConverteOrdenado.TestConverter;
var
  ReturnValue: string;
begin
  ReturnValue := FConverteOrdenado.Converter;
  // TODO: Validate method results
end;

procedure TestTConverteOrdenado.TestAdicionarTexto;
var
  ReturnValue: IConversao;
  Value: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FConverteOrdenado.AdicionarTexto(Value);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTConverteTexto.Suite);
  RegisterTest(TestTConverteInvertido.Suite);
  RegisterTest(TestTConvertePrimeiraMaiuscula.Suite);
  RegisterTest(TestTConverteOrdenado.Suite);
end.

